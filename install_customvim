#!/usr/bin/env python3
# TODO faire une petite boucle de grep pour parser les options de vim --version 
# pour check que j'ai tout ce que je veux : +clipboard, +python", etc
# clipboard, python, python3, cmdline_hist, vertsplit, X11, xterm_clipboard, eval, viminfo
#  TODO faire un check des outils shell que j'utilise en amont, make, git, etc
#  TODO mettre un message qui donnes les dependances de ce module ou qui les dl auto
# si je fais un packaging debian et mac

def venv_imports(*args):

    import sys
    import subprocess
    from importlib import import_module, __import__

    venv_dirpath = os.path.join(tempfile.gettempdir(), 'vim_installer_venv')
    venv_python3_binpath = os.path.join(venv_dirpath, "bin", "python3")
    python3_binpath = sys.executable

    if not python3_binpath.startswith(venv_dirpath):

        if not os.path.exists(venv_dirpath):
            print("Building temporary virtual environment, a few seconds is needed.")
            subprocess.check_call(
                [python3_binpath, '-m', 'venv', '--without-pip', venv_dirpath],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            get_pip_filepath = os.path.join(venv_dirpath, 'get-pip.py')
            with open(get_pip_filepath, mode='w', encoding='utf8') as f:
                with urllib.request.urlopen('https://bootstrap.pypa.io/get-pip.py') as response:
                    f.write(response.read().decode('utf8'))
            subprocess.check_call(
                [venv_python3_binpath, get_pip_filepath],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
        try:
            args = [venv_python3_binpath]
            args.extend(sys.argv)
            subprocess.check_call(args)
        except subprocess.CalledProcessError as e:
            sys.exit(e.returncode)
        sys.exit(0)

    else:

        def import_install(module, attribute=None):

            if attribute is None:
                def import_statement(): globals()[module] = __import__(module)
            else:
                def import_statement() : globals()[attribute] = getattr(import_module(module), attribute)
            try:
                import_statement()
            except ImportError:
                subprocess.check_call(
                    [venv_python3_binpath, "-c", "import pip; pip.main(['install', '{}'])".format(module.split('.')[0])],
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL
                )
                import_statement()


        for arg in args:

            if type(arg) is str:
                import_install(arg)
            else:
                if type(arg[1]) is str:
                    import_install(arg[0], arg[1])
                else:
                    for attribute in arg[1]:
                        import_install(arg[0], attribute)

'''
# First install dependencies needed for compilation.
# This may be incomplete as I created this script on a station which had
# already a lot of stuff installed. In such a case, compilation would fail with
# a message indicating the missing library (hopefully). This should be added to
# the list below.
echo_y "Installing dependencies."
sudo apt-get install -y \
    git\
    build-essential\
    cmake\
    python-dev\
    python3-dev\
    libncurses5-dev\
    exuberant-ctags
'''


import argparse
import logging
import os
import os.path
import tempfile
import shutil
import re
import urllib.request
from contextlib import contextmanager
venv_imports(
    'coloredlogs',
    'click',
    ['plumbum', ['local', 'FG']],
    ['plumbum.cmd', ['git', 'make']]
)

VIM_NAME='customvim'
REPO_PATH=os.path.dirname(os.path.realpath(__file__))

@click.command(context_settings={'help_option_names': ['-h', '--help']})
@click.option(
    '-f',
    '--force-install',
    help='Deletes the installation directory if it already exists (beware !!)',
    is_flag=True,
    default=False
)
@click.option(
    '-p',
    '--install-dirpath',
    help='The installation directory path',
    default=os.path.join(os.path.expanduser('~'), VIM_NAME)
)
def vim_installer(install_dirpath, force_install):


    install_dirpath = _check_install_dirpath(install_dirpath, force_install)
    _set_global_logger()
    vim_dl_dirpath = os.path.join(tempfile.gettempdir(), 'vim')
    _get_vim(vim_dl_dirpath)
    _configure_vim(install_dirpath, vim_dl_dirpath)
    _compile_vim(vim_dl_dirpath)
    _install_vim(install_dirpath, vim_dl_dirpath)
    _install_vim_plugins(install_dirpath)


def _check_install_dirpath(install_dirpath, force_install):

    if os.path.exists(install_dirpath) and not force_install:
        raise click.UsageError(
            "'{}' exists, use the -f switch to force installation".format(
                install_dirpath
            )
        )
    return os.path.realpath(install_dirpath)


@contextmanager
def _tmp_cd(dirpath):
    owd = os.getcwd()
    logger.debug("Changing to '{}'".format(dirpath))
    os.chdir(dirpath)
    yield
    logger.debug("Changing back to '{}'".format(owd))
    os.chdir(owd)


def _set_global_logger():

    global logger
    coloredlogs.install(level='DEBUG', fmt='%(levelname)s %(message)s')
    logger = logging.getLogger(os.path.basename(__file__))


def _get_vim(vim_dl_dirpath):

    logger.info('Getting Vim from Github')
    if os.path.isfile(vim_dl_dirpath):
        os.remove(vim_dl_dirpath)
    if os.path.exists(vim_dl_dirpath):
        with _tmp_cd(vim_dl_dirpath):
            git['pull']()
    else:
        git['clone', 'https://github.com/vim/vim.git', vim_dl_dirpath]()


def _configure_vim(install_dirpath, vim_dl_dirpath):

    with _tmp_cd(vim_dl_dirpath):
        logger.info('Configuring Vim')
        make['clean']()
        configure = local[os.path.join(os.getcwd(), 'configure')]
        configure(
            '--prefix={}'.format(install_dirpath),
            '--enable-fail-if-missing',
            '--with-features=huge',
            '--disable-gui',
            '--with-x',
            '--enable-multibyte',
            '--enable-xim',
            '--enable-xsmp',
            '--disable-xsmp-interact',
            '--with-tlib=ncurses',
            '--enable-pythoninterp',
            '--enable-python3interp',
        )


def _compile_vim(vim_dl_dirpath):

    with _tmp_cd(vim_dl_dirpath):
        logger.info('Making Vim')
        make()


def _install_vim(install_dirpath, vim_dl_dirpath):

    with _tmp_cd(vim_dl_dirpath):
        logger.info("Installing Vim to '{}'".format(install_dirpath))
        if os.path.isfile(install_dirpath):
            os.remove(install_dirpath)
        if os.path.isdir(install_dirpath):
            shutil.rmtree(install_dirpath)
        make['install']()


def _install_vim_plugins(install_dirpath):

    logger.info('Installing Vim plugins and vimrc file')
    vim_autoload_dirpath = os.path.join(install_dirpath, 'share', 'vim', 'vimfiles', 'autoload')
    os.makedirs(vim_autoload_dirpath)
    with open(os.path.join(vim_autoload_dirpath, 'plug.vim'), mode='w', encoding='utf8') as f:
        with urllib.request.urlopen('https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim') as response:
            f.write(response.read().decode('utf8'))
    repo_vimrc_filepath = os.path.join(REPO_PATH, 'vimrc')
    vimfiles_dirpath = os.path.join(install_dirpath, 'share', 'vim', 'vimfiles')
    vimrc_filepath = os.path.join(vimfiles_dirpath, 'vimrc')
    viminfo_filepath = os.path.join(vimfiles_dirpath, 'viminfo')
    with open(repo_vimrc_filepath, encoding='utf8') as f:
        plugins = re.search('call plug#begin\(\).*?call plug#end\(\)', f.read(), re.DOTALL).group()
    with open(vimrc_filepath, mode='w', encoding='utf8') as f:
        f.write('set nocompatible\n')
        f.write(plugins)
    vim_binpath = os.path.join(install_dirpath, 'bin', 'vim')
    vim_options = [
        '--cmd',
        'set runtimepath-=~/.vim | set runtimepath-=~/.vim/after | set packpath-=~/.vim | set packpath-=~/.vim/after | set nocompatible',
        '-i',
        viminfo_filepath, 
        '-u',
        vimrc_filepath
    ]
    vim = local[vim_binpath]
    vim = vim[vim_options]
    vim['-c', 'PlugInstall', '-c', 'qall'] & FG
    vim_options[1] = '"{}"'.format(vim_options[1])
    vim_alias="alias vim='{} {}'".format(vim_binpath, ' '.join(vim_options))
    shutil.copy(repo_vimrc_filepath, vimrc_filepath)
    logger.info("Vim successfully installed to '{}'".format(install_dirpath))
    logger.info('Add the alias above to your .bashrc file to use your custom Vim')
    logger.info(vim_alias)


if __name__ == '__main__':
    vim_installer()

