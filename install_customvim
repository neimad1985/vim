#!/usr/bin/env bash
# TODO faire une petite boucle de grep pour parser les options de vim --version 
# pour check que j'ai tout ce que je veux : +clipboard, +python", etc
# clipboard, python, python3, cmdline_hist, vertsplit, X11, xterm_clipboard, eval, viminfo

set -e







# 'echo' with yellow color.
function echo_y {
    echo -e '\e[1;33m'"$@"'\e[0m'
}

# 'echo' with green color.
function echo_g {
    echo -e '\e[1;32m'"$@"'\e[0m'
}










REPO_PATH=$(dirname $(readlink -f $0))
VIM_NAME=customvim
INSTALL_PATH=~/${VIM_NAME}
DL_DIRPATH=/tmp/${VIM_NAME}


# Parse arguments.
usage() {
    echo "Installs a custom version of the Vim editor at location '${INSTALL_PATH}'."
    echo
    echo "Usage : '$(basename $0)' [options]"
    echo "Options :"
    echo "    -f : force install."
}

OPTIND=1
FORCE_INSTALL=0
while getopts "hf" opt; do
    case "$opt" in
    h)
        usage
        exit 0
        ;;
    f)  FORCE_INSTALL=1
        ;;
    esac
done
shift $((OPTIND-1))

[ "$1" = "--" ] && shift

if [ $# -gt 0 ]; then
    echo "[Error] Too may positional arguments."
    echo
    usage
    exit 1
fi

# Check install directory.
if [ -e ${INSTALL_PATH} -a ${FORCE_INSTALL} -eq 0 ]; then
    echo "'${INSTALL_PATH}' already exists, use option -f to force install."
    exit 1
fi












# First install dependencies needed for compilation.
# This may be incomplete as I created this script on a station which had
# already a lot of stuff installed. In such a case, compilation would fail with
# a message indicating the missing library (hopefully). This should be added to
# the list below.
echo_y "Installing dependencies."
sudo apt-get install -y \
    git\
    build-essential\
    cmake\
    python-dev\
    python3-dev\
    libncurses5-dev\
    exuberant-ctags







echo_y "Cloning Vim from Github to '${DL_DIRPATH}'."
rm -rf ${DL_DIRPATH}
git clone https://github.com/vim/vim.git ${DL_DIRPATH}







echo_y "Configuring Vim."
cd ${DL_DIRPATH}
./configure \
    --prefix=${INSTALL_PATH} \
    --enable-fail-if-missing \
    --with-features=huge \
    --disable-gui \
    --with-x \
    --enable-multibyte \
    --enable-xim \
    --enable-xsmp \
    --disable-xsmp-interact \
    --with-tlib=ncurses \
    --enable-pythoninterp \
    --enable-python3interp






echo_y "Making Vim."
make clean
make








echo_y "Installing Vim."
rm -rf ${INSTALL_PATH}
make install







echo_y "Deleting '${DL_DIRPATH}'."
rm -rf ${DL_DIRPATH}









echo_y "Installing Vim plugins"

mkdir -p ${INSTALL_PATH}/share/vim/vimfiles/autoload
wget -O ${INSTALL_PATH}/share/vim/vimfiles/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
PLUG_BEGIN=$(grep -n 'call plug#begin' ${REPO_PATH}/vimrc | cut -f1 -d:)
PLUG_END=$(grep -n 'call plug#end' ${REPO_PATH}/vimrc | cut -f1 -d:)
echo 'set nocompatible' > ${INSTALL_PATH}/share/vim/vimfiles/vimrc
sed -n ${PLUG_BEGIN},${PLUG_END}p ${REPO_PATH}/vimrc >> ${INSTALL_PATH}/share/vim/vimfiles/vimrc
VIM_ALIAS=${INSTALL_PATH}'/bin/vim --cmd "set runtimepath-=~/.vim | set runtimepath-=~/.vim/after | set packpath-=~/.vim | set packpath-=~/.vim/after | set nocompatible" -i '${INSTALL_PATH}'/share/vim/vimfiles/viminfo -u '${INSTALL_PATH}'/share/vim/vimfiles/vimrc'
eval ${VIM_ALIAS} '-c "PlugInstall | quit | quit"'







echo_y "Installing vimrc file"
cp ${REPO_PATH}/vimrc ${INSTALL_PATH}/share/vim/vimfiles








echo_g "Vim successfully installed to '${INSTALL_PATH}'."
echo_y "Add the alias above to your .bashrc file to use your custom Vim."







